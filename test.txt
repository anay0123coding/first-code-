

welcome to my first code in github

#selective sorting

def sort(nums):
    
    for i in range(len(nums)):
        minval = i 
        for j in range(i,len(nums)):
            if nums[j]<nums[minval]:
                minval = j

        temp = nums[i]
        nums[i]= nums[minval]
        nums[minval] = temp


nums = [5,3,8,6,7,2]
sort(nums)

print(nums)
 

#bubble sorting

def sort(nums):
    for i in range(len(nums)- 1 , 0 , -1):
        for j in range(i):
            if nums[j]> nums[j+1]:
                temp = nums[j]
                nums[j]= nums[j+1]
                nums[j+1]= temp


nums = [5,2,6,8,9,4]
sort(nums)
print(nums)


#this is a calculator

def add(a,b):
    result = a + b 
    print(result)

def sub(a,b):
    result = a - b
    print(result)

def mul(a,b):
    result = a * b 
    print(result)

def div(a,b):
    result = a / b 
    print(result)

a = int(input("enter the first number:"))
b = int(input("enter the second number:"))
op = input("enter the operator:")

if op == "+":
    add(a,b)
elif op == "-":
    sub(a,b)
elif op == "*":
    mul (a,b)
elif op == "/":
    div(a,b)
else:
    print("invalid operator")
    
    
#this is a countdown timer 

import time

def countdown(t):

    while t:
        mins , secs =  divmod( t , 60)
        timer = '{:02d} : {:02d}' . format(mins , secs)
        print(timer )
        time.sleep(1)
        t -= 1

    print("you are killed")

t = int(input("enter the number of seconds"))
countdown(int(t))

#clock

from tkinter import *
from tkinter.ttk import *
from time import strftime

root = Tk()
root.title("clock")

def time():
    string = strftime('%H:%M:%S %p')
    label.config(text=string)
    label.after(1000, time)

label = Label(root , font=("western_bang_bang" , 50) , background= "black", foreground = "cyan")
label.pack(anchor="center")
time()

mainloop()

#hangman 

import random

with open('words.txt', 'r') as f:
    words = f.readlines()

word = random.choice(words)[:-1]

allowed_errors = 7 
guesses =[]
done = False

while not done:
    for letter in word :
        if letter.lower() in guesses:
            print(letter, end=" ")
        else:
            print("_", end=" ")
    print("")
    

    guess = input(f"Allowed_errors left{allowed_errors}, Next guess:")
    guesses.append(guess.lower())
    if guess.lower() not in word.lower():
        allowed_errors -= 1
        if allowed_errors == 0:
            break

    done = True
    for letter in word:
        if letter.lower() not in guesses:
            done = False

if done:
    print(f"you found the word! it was {word}")
else:
    print(f"game over! the word was {word}")
    
    
    
#snake game made 


import random
import pygame
import time

from pygame.constants import WINDOWHITTEST

pygame.init()


white = (255, 255 , 255)
black = (0, 0, 0)
red = (255 ,0 , 0 )
orange = (255 , 165 , 0)


width, height = 600 , 400


game_display = pygame.display.set_mode((width , height))
pygame.display.set_caption("anay's snake game")

clock = pygame.time.Clock()

snake_size = 10
snake_speed = 10

message_font = pygame.font.SysFont('ubuntu' , 30)
score_font = pygame.font.SysFont('ubuntu' , 25)

def print_score(score):
    text = score_font.render("Score:" + str(score), True , orange)
    game_display.blit(text, [0,0])

def draw_snake(snake_size, snake_pixels):
    for pixels in snake_pixels:
        pygame.draw.rect(game_display, white , [pixels[0], pixels[1] , snake_size , snake_size])

def run_game():


    game_over = False
    game_close = False

    x = width / 2
    y = height / 2 

    x_speed = 0
    y_speed = 0

    snake_pixels =[]
    snake_length = 1

    target_x = round(random.randrange(0, width -snake_size) / 10.0) * 10.0
    target_y = round(random.randrange(0, height -snake_size) / 10.0) * 10.0

    while not game_over:

        while game_close:
            game_display.fill(black)
            game_over_message = message_font.render("game over!" , True , red)
            game_display.blit(game_over_message, [width / 3 , height / 3 ])
            print_score(snake_length - 1 )
            pygame.display.update()

            for event in pygame.event.get():
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_1:
                        game_over = True
                        game_close = False
                    if event.key == pygame.K_2:
                        run_game()
                if event.type == pygame.QUIT:
                    game_over = True
                    game_close = False                    

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                game_over = True
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    x_speed = -snake_size
                    y_speed = 0
                if event.key == pygame.K_RIGHT:
                    x_speed = snake_size
                    y_speed = 0 
                if event.key == pygame.K_UP:
                    x_speed = 0
                    y_speed = -snake_size
                if event.key == pygame.K_DOWN:
                    x_speed = 0
                    y_speed = snake_size

        if x>= width or x < 0 or y>=height or y < 0 :
            game_close = True

        x += x_speed 
        y += y_speed


        game_display.fill(black)
        pygame.draw.rect(game_display , orange , [target_x, target_y, snake_size, snake_size])

        snake_pixels.append([x,y])

        if len(snake_pixels) > snake_length :
            del snake_pixels[0]

        for pixels in snake_pixels[:-1]:
            if pixels == [x,y]:
                game_close = True

        draw_snake(snake_size, snake_pixels)
        print_score(snake_length - 1)

        pygame.display.update()

        if x == target_x and y == target_y:
            target_x = round(random.randrange(0, width -snake_size) / 10.0) * 10.0
            target_y = round(random.randrange(0, height -snake_size) / 10.0) * 10.0
            snake_length += 1

        clock.tick(snake_speed)

    pygame.quit()
    quit()

run_game()



    




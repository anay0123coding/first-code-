

welcome to my first code in github

#selective sorting

def sort(nums):
    
    for i in range(len(nums)):
        minval = i 
        for j in range(i,len(nums)):
            if nums[j]<nums[minval]:
                minval = j

        temp = nums[i]
        nums[i]= nums[minval]
        nums[minval] = temp


nums = [5,3,8,6,7,2]
sort(nums)

print(nums)
 

#bubble sorting

def sort(nums):
    for i in range(len(nums)- 1 , 0 , -1):
        for j in range(i):
            if nums[j]> nums[j+1]:
                temp = nums[j]
                nums[j]= nums[j+1]
                nums[j+1]= temp


nums = [5,2,6,8,9,4]
sort(nums)
print(nums)


#this is a calculator

def add(a,b):
    result = a + b 
    print(result)

def sub(a,b):
    result = a - b
    print(result)

def mul(a,b):
    result = a * b 
    print(result)

def div(a,b):
    result = a / b 
    print(result)

a = int(input("enter the first number:"))
b = int(input("enter the second number:"))
op = input("enter the operator:")

if op == "+":
    add(a,b)
elif op == "-":
    sub(a,b)
elif op == "*":
    mul (a,b)
elif op == "/":
    div(a,b)
else:
    print("invalid operator")
    
    
#this is a countdown timer 

import time

def countdown(t):

    while t:
        mins , secs =  divmod( t , 60)
        timer = '{:02d} : {:02d}' . format(mins , secs)
        print(timer )
        time.sleep(1)
        t -= 1

    print("you are killed")

t = int(input("enter the number of seconds"))
countdown(int(t))

#clock

from tkinter import *
from tkinter.ttk import *
from time import strftime

root = Tk()
root.title("clock")

def time():
    string = strftime('%H:%M:%S %p')
    label.config(text=string)
    label.after(1000, time)

label = Label(root , font=("western_bang_bang" , 50) , background= "black", foreground = "cyan")
label.pack(anchor="center")
time()

mainloop()

#hangman 

import random

with open('words.txt', 'r') as f:
    words = f.readlines()

word = random.choice(words)[:-1]

allowed_errors = 7 
guesses =[]
done = False

while not done:
    for letter in word :
        if letter.lower() in guesses:
            print(letter, end=" ")
        else:
            print("_", end=" ")
    print("")
    

    guess = input(f"Allowed_errors left{allowed_errors}, Next guess:")
    guesses.append(guess.lower())
    if guess.lower() not in word.lower():
        allowed_errors -= 1
        if allowed_errors == 0:
            break

    done = True
    for letter in word:
        if letter.lower() not in guesses:
            done = False

if done:
    print(f"you found the word! it was {word}")
else:
    print(f"game over! the word was {word}")
    
    
    
#snake game made 


import random
import pygame
import time

from pygame.constants import WINDOWHITTEST

pygame.init()


white = (255, 255 , 255)
black = (0, 0, 0)
red = (255 ,0 , 0 )
orange = (255 , 165 , 0)


width, height = 600 , 400


game_display = pygame.display.set_mode((width , height))
pygame.display.set_caption("anay's snake game")

clock = pygame.time.Clock()

snake_size = 10
snake_speed = 10

message_font = pygame.font.SysFont('ubuntu' , 30)
score_font = pygame.font.SysFont('ubuntu' , 25)

def print_score(score):
    text = score_font.render("Score:" + str(score), True , orange)
    game_display.blit(text, [0,0])

def draw_snake(snake_size, snake_pixels):
    for pixels in snake_pixels:
        pygame.draw.rect(game_display, white , [pixels[0], pixels[1] , snake_size , snake_size])

def run_game():


    game_over = False
    game_close = False

    x = width / 2
    y = height / 2 

    x_speed = 0
    y_speed = 0

    snake_pixels =[]
    snake_length = 1

    target_x = round(random.randrange(0, width -snake_size) / 10.0) * 10.0
    target_y = round(random.randrange(0, height -snake_size) / 10.0) * 10.0

    while not game_over:

        while game_close:
            game_display.fill(black)
            game_over_message = message_font.render("game over!" , True , red)
            game_display.blit(game_over_message, [width / 3 , height / 3 ])
            print_score(snake_length - 1 )
            pygame.display.update()

            for event in pygame.event.get():
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_1:
                        game_over = True
                        game_close = False
                    if event.key == pygame.K_2:
                        run_game()
                if event.type == pygame.QUIT:
                    game_over = True
                    game_close = False                    

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                game_over = True
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    x_speed = -snake_size
                    y_speed = 0
                if event.key == pygame.K_RIGHT:
                    x_speed = snake_size
                    y_speed = 0 
                if event.key == pygame.K_UP:
                    x_speed = 0
                    y_speed = -snake_size
                if event.key == pygame.K_DOWN:
                    x_speed = 0
                    y_speed = snake_size

        if x>= width or x < 0 or y>=height or y < 0 :
            game_close = True

        x += x_speed 
        y += y_speed


        game_display.fill(black)
        pygame.draw.rect(game_display , orange , [target_x, target_y, snake_size, snake_size])

        snake_pixels.append([x,y])

        if len(snake_pixels) > snake_length :
            del snake_pixels[0]

        for pixels in snake_pixels[:-1]:
            if pixels == [x,y]:
                game_close = True

        draw_snake(snake_size, snake_pixels)
        print_score(snake_length - 1)

        pygame.display.update()

        if x == target_x and y == target_y:
            target_x = round(random.randrange(0, width -snake_size) / 10.0) * 10.0
            target_y = round(random.randrange(0, height -snake_size) / 10.0) * 10.0
            snake_length += 1

        clock.tick(snake_speed)

    pygame.quit()
    quit()

run_game()

#flappybird game made

import pygame
import neat
import time
import os
import random
pygame.font.init()

WIN_WIDTH = 700
WIN_HEIGHT = 700

BIRD_IMGS = [pygame.transform.scale2x(pygame.image.load(os.path.join("imgs", "bird1.png"))), pygame.transform.scale2x(pygame.image.load(os.path.join("imgs", "bird2.png"))), pygame.transform.scale2x(pygame.image.load(os.path.join("imgs", "bird3.png")))]
PIPE_IMG = pygame.transform.scale2x(pygame.image.load(os.path.join("imgs", "pipe.png")))
BASE_IMG = pygame.transform.scale2x(pygame.image.load(os.path.join("imgs", "base.png")))
BG_IMG = pygame.transform.scale2x(pygame.image.load(os.path.join("imgs", "bg.png")))

STAT_FONT = pygame.font.SysFont("DejaVu Sans" , 50)

class Bird:
    IMGS = BIRD_IMGS
    MAX_ROTATION = 25
    ROT_VEL = 20
    ANIMATION_TIME = 5

    def __init__(self , x , y):
        self.x = x
        self.y = y 
        self.tilt = 0 
        self.tick_count = 0
        self.vel = 0
        self.height = self.y
        self.img_count = 0
        self.img = self.IMGS[0]

    def jump(self):
        self.vel = -10.5
        self.tick_count = 0
        self.height = self.y

    def move(self):
        self.tick_count += 1

        d = self.vel*self.tick_count + 1.5*self.tick_count**2

        if d >= 16:
            d = 16

        if d < 0:
            d -= 2

        self.y = self.y + d

        if d < 0 or self.y < self.height + 50:
            if self.tilt < self.MAX_ROTATION:
                self.tilt = self.MAX_ROTATION
            else:
                if self.tilt > -90:
                    self.tilt -= self.ROT_VEL

    def draw(self , win):
        self.img_count += 1

        if self.img_count < self.ANIMATION_TIME:
            self.img = self.IMGS[0]
        elif self.img_count < self.ANIMATION_TIME*2:
            self.img = self.IMGS[1]
        elif self.img_count < self.ANIMATION_TIME*3:
            self.img = self.IMGS[2]
        elif self.img_count < self.ANIMATION_TIME*4:
            self.img = self.IMGS[1]
        elif self.img_count == self.ANIMATION_TIME*4 + 1:
            self.img = self.IMGS[0]
            self.img_count = 0

        if self.tilt <= -80:
            self.img = self.IMGS[1]
            self.img_count = self.ANIMATION_TIME*2

        rotated_image = pygame.transform.rotate(self.img , self.tilt)
        new_rect = rotated_image.get_rect(center=self.img.get_rect(topleft = (self.x , self.y)).center)
        win.blit(rotated_image , new_rect.topleft)

    def get_mask(self):
        return pygame.mask.from_surface(self.img)

class Pipe:
    GAP = 200
    VEL = 5
    
    def __init__(self , x):
        self.x = x
        self.height = 0
        

        self.top = 0
        self.bottom = 0
        self.PIPE_TOP = pygame.transform.flip(PIPE_IMG , False , True)
        self.PIPE_BOTTOM = PIPE_IMG

        self.passed = False
        self.set_height()

    def set_height(self):
        self.height = random.randrange(50 , 450)
        self.top = self.height - self.PIPE_TOP.get_height()
        self.bottom = self.height + self.GAP

    def move(self):
        self.x -= self.VEL

    def draw(self , win):
        win.blit(self.PIPE_TOP , (self.x , self.top))
        win.blit(self.PIPE_BOTTOM, (self.x, self.bottom))

    def collide(self , bird):
        bird_mask = bird.get_mask()
        top_mask =  pygame.mask.from_surface(self.PIPE_TOP)
        bottom_mask =  pygame.mask.from_surface(self.PIPE_BOTTOM)

        top_offset = (self.x - bird.x , self.top - round(bird.y))
        bottom_offset = (self.x - bird.x , self.bottom - round(bird.y))

        b_point = bird_mask.overlap(bottom_mask , bottom_offset)
        t_point = bird_mask.overlap(top_mask , top_offset)

        if t_point or b_point:
            return True

        return False
        
class Base:
    VEL = 5
    WIDTH = BASE_IMG.get_width()
    IMG = BASE_IMG

    def __init__(self, y):
        self.y = y 
        self.x1 = 0
        self.x2 = self.WIDTH

    def move(self):
        self.x1 -= self.VEL
        self.x2 -= self.VEL

        if self.x1 + self.WIDTH < 0:
            self.x1 = self.x2 + self.WIDTH

        if self.x2 + self.WIDTH < 0:
            self.x2 = self.x1 + self.WIDTH

    def draw(self , win):
        win.blit(self.IMG , (self.x1 , self.y))
        win.blit(self.IMG , (self.x2 , self.y))

def draw_window(win , birds , pipes, base , score):
    win.blit(BG_IMG , (0,0))

    for pipe in pipes:
        pipe.draw(win)

    text = STAT_FONT.render("Score" + str(score), 1, (255,255,255))
    win.blit(text , (WIN_WIDTH - 10 - text.get_width() , 10))


    base.draw(win)

    for bird in birds:
        bird.draw(win)

    pygame.display.update()

def main(genomes , config):
    nets = []
    ge = []
    birds = []

    for _, g in genomes:
        net = neat.nn.FeedForwardNetwork.create(g , config)
        nets.append
        birds.append(Bird(230 , 350))
        g.fitness = 0
        ge.append(g)


    base = Base(730)
    pipes = [Pipe(600)]
    win = pygame.display.set_mode((WIN_WIDTH , WIN_HEIGHT))
    clock = pygame.time.Clock()

    score = 0 

    run = True
    while run:
        clock.tick(30)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
                pygame.quit()
                quit()


        pipe_ind = 0
        if len(birds) > 0:
            if len(pipes) > 1 and birds[0].x > pipes[0].x + pipes[0].PIPE_TOP.get_width():
                pipe_ind = 1
        else:
            run = False
            break


        for x , bird in enumerate(birds):
            bird.move()
            ge[x].fitness += 0.1

            output = nets[x].activate((bird.y , abs(bird.y - pipes[pipe_ind].height) , abs(bird.y - pipes[pipe_ind].bottom)))

            if output[0] > 0.5:
                bird.jump()


        add_pipe = False
        rem = []
        base.move()
        for pipe in pipes:
            for x, bird in enumerate(birds):
                if pipe.collide(bird):
                    ge[x].fitness -= 1
                    birds.pop(x)
                    nets.pop(x)
                    ge.pop(x)
                       
            
                if not pipe.passed and pipe.x < bird.x:
                    pipe.passed = True
                    add_pipe = True

            if pipe.x + pipe.PIPE_TOP.get_width() < 0:
                rem.append(pipe)

            pipe.move()   

        if add_pipe:
            score += 1
            for g in ge:
                g.fitness += 5
            pipes.append(Pipe(600))
        
        for r in rem:
            pipes.remove(r)

        for bird in birds:
            if bird.y + bird.img.get_height() >= 730 or bird.y < 0:
                birds.pop(x)
                nets.pop(x)
                ge.pop(x)
                
        
        base.move()
        draw_window(win , birds , pipes , base , score)


def run(config_path):
    config = neat.config.Config(neat.DefaultGenome , neat.DefaultReproduction , 
                     neat.DefaultSpeciesSet , neat.DefaultStagnation ,
                     config_path)

    p = neat.Population(config)

    p.add_reporter(neat.StdOutReporter(True))
    stats = neat.StatisticsReporter()
    p.add_reporter(stats)

    winner = p.run(main, 50)

if __name__ == "__main__":
    local_dir = os.path.dirname(__file__)
    config_path = os.path.join(local_dir , "config-feedforward.txt")
    run(config_path)



# for printing  : anay's "laptop"

print('anay\'s "laptop"')


# simple codes 

num = [23 , 45  , 73 , 47 , 67]

num.append(44)
num.remove(23)
num.insert(3 , 99)
num.pop(2)
num.extend([22 , 76, 56, 41 , 11])
del num[3:]

print(num)

################

# new codes 



# dictionary


data = {1:'navin' , 2: 'kiran' ,4: 'anay' }

print(data[1])
print(data.get(3, "not found"))
print(data.get(4))

print(data.keys())

keys = ['ramesh' , 'kiran' , 'animesh']  
values = ['python' , 'javascript' , 'ruby']
data2 = dict(zip(keys , values))
print(data2)

data2['monika'] = 'c #'
print(data2)

del data2['ramesh']
print(data2)

# dictionary within dictionary

prog = {'js' : 'atom', 'cs': 'vs', 'python': ['sublime' ,'pycharm'] , 'java' : {'jse' : 'netbeans' , 'jee': 'eclipse'}}
print(prog['js'])
print(prog['python'][1])
print(prog['java']['jee'])

# data types

num = 3.5

print(type(num))

num2 = int(num)
print(num2)

print(int(True))


print(list(range(10)))
print(list(range(2,10,3)))

# operators

x = 2
y = 4

x += 2

print(x * y )

# binary system

print(bin(25))
print(bin(20))
print(bin(100))
print(int(0b11001))
print(oct(25))
print(hex(10))

#############

# more codes 

# swap two variables 

a = 4
b = 5

c = a 
a = b 
b = c

print(a)
print(b)


a = a + b   # a = 5 + 4 = 9
b = a - b   # b = 9 - 5 = 4
a = a - b   # a = 9 - 4 = 5

print(a)
print(b)

a , b = b ,a 

print(a)
print(b)


# important maths functions

import math as m 

print(m.sqrt(25))
print(m.floor(3.8))
print(m.ceil(2.1))
print(m.pow(3,4))


# code to print the greatest number out of three values taken from the user

x = int(input("enter your number"))
y = int(input("enter your number"))
z = int(input("enter your number"))

if x > y and x > z:
    print(x , "is the greatest number")
elif y > x and y > z:
    print(y , "is the greatest number")
elif z > x and z > x:
    print(z , "is the greatest number")
else:
    print("all are equal")

# some more codes about while loop



i = 1 

while i <=5:
    print("hello " , end = "")
    j = 1
    while j <= 5:
        print("rocks " , end= "")
        j = j + 1
    
    i += 1 
    print()


# code to print all values from 1 to 100 without printing the numbers divisible by 3 or 5


b = 1
a = 1
while b<= 100:
    if a % 5 == 0 or a % 3 == 0:
        a = a + 1
    else:
        print(a)
        a = a + 1
    b = b + 1
    
# code to print
# # # # # 
# # # # #
# # # # #
# # # # # 


x = 1


while x <= 4:
    print("# " , end = "" )
    y = 1
    while y <= 4:
        print("# " , end = "" )
        y = y + 1
    x = x + 1
    print()

for i in range(1,5):
    print("# " , end = "")
    for y in range(1,5):
        print("# " , end = "")

    print()

# break and continue

#### remark - the 'pass' keyword will behave as 'continue' keyword if we give an else block to the if block to which we have given the 'pass' 
                  command . 'break' simply stops the loop. continue and pass commands will tell the loop to skip the code(as specified).
                  the only difference is that pass needs an else block while continue command does not need it .



# break

av = 5

x= int(input("How many candies do you want?"))

i = 1
while i <= x:

    if i >= av:
        print("we are out of stock as we just had " , av , "candies")
        break
        

    print("candy")
    i += 1
    

print("bye")

#continue

for i in range(1,101):
    if i % 3 == 0 or i % 5 == 0:
        pass
    else:
        print(i)

print("bye")



# code to print 
# # # # #
# # # #
# # #
# #
#  




for i in range(5, 0 ,-1):
    print("# " , end = "")
    for j in range(1, i ):
        print("# " , end = "")
        
    print()




# code for printing 
 #1 2 3 4 
 #2 3 4 
 #3 4 
 #4 
  


for i in range(5):
    for j in range(i+1 , 5):
        print(j , end = "")
        


    print()


# code for printing
# APQR 
# ABQR
# ABCR
# ABCD



s1 = 'ABCD'
s2 = 'PQR'
for i in range(4):
    print(s1[0:i+1]+s2[i:])

# more codes 

nums = [23,74,21,67,74]

for num in nums:
    if num%5 == 0:
        print(num)
        break
else:
    print("not found")


x = int(input("enter your number here"))

if x > 1:
    for i in range(2,x):
        if x % i == 0:
            print(x , "is not a prime number")
            break
    else:
        print(x , "is a prime number")
else:
    print(x , "is not a prime number")

# more codes about array

from array import *


vals = array('i', [4,6,7,2,3])
vals.insert(3,9)
vals.reverse()
print(vals)

for i in range(len(vals)):
    print(vals[i])

for i in vals:
    print(i)


newArr = array(vals.typecode,(a for a in vals))

print(newArr)

j = 0
while j < len(newArr):
    print(newArr[j])
    j +=1 


# more about arrays


from array import *

arr = array('i' , [])

n = int(input("enter the length of the array"))


for i in range(n):
    x = int(input("enter the value")) 
    arr.append(x)
    

print(arr)

# functions 



def update(lst):

    print(id(lst))

    lst[1] = 28
    print(id(lst))
    print("x" ,lst)

lst = [10,29,47]
print(id(lst))
update(lst)
print("lst ",lst)

def person(name, age = 19): # formal arguement
    print(name)
    print(age)


person( age = 15,name = "anay" )  # actual arguement
person("musk")


def sum(a,*b):
    c = a

    for i in b:
        c = c + i

    print(c)

sum(5,6 , 54,23)

# also the same programme


def sum(*b):
    c = 0

    for i in b:
        c = c + i

    print(c)

sum(5,6 , 54,23)

def mul(*b):
    c = 1
    
    for i in b:
        c = c * i

    print(c)

mul(5,7,7,9,2,4,65,7,2)


def renew(x):
    print(x)  # takes the value of 'a' as the value of 'x' is given before the print statement of the function
    x = 6
    print(x)  # takes the value of 'x' as it is given within the function after the print statement 


a = 2
renew(a)  # puts / renews the value of 'a' and gives the value of 'x' for the function
print(a)  # prints the original value of 'a'


# keyword variable length arguement 

def person(name , **data):  # double star for printing the keywords as well 

    print(name)
    
    for i,j in data.items():
        print(i,j)



person('anay' , age = 15 , town = 'mollarpur' ,mob = 8347355645)

# global variable and local variable 

a = 10  # global variable
print(id(a))

def something():
    global a # makes the 'a' within the function global . so the 'a' outside the function also takes the value of the local 'a'.
    
    a = 9
    x = globals()['a']  # gives access to all the global variables and change to this value will affect all global values 
    print(id(x))
    print(" in fun", a) 

    globals()['a'] = 15  # the 'a' within function is changed and thus affects all the global 'a'


something()





print(" outside" ,a)

# passing a list to function


def count(lst):

    even = 0 
    odd = 0

    for i in lst:
        if i%2 == 0:
            even += 1
        else:
            odd += 1

    return even , odd



lst = [45,77,23,84,62,76,12,74,79]


even , odd = count(lst)
print(even)
print(odd)

print("even : {} and odd : {}".format(even,odd)) # format gives the formatted style 




# code for selecting some names and then printing which name has letter more than four and which and four or less

def count(name):

    more_than_four = 0
    four = 0
    

    for i in name:
        if len(i) > 4:
            more_than_four += 1
        else:
            four += 1

    return more_than_four ,four

name = ["anay" ," nabin" , "amit" , "arindam" , "debobroto"]

more_than_four , four = count(name)

print(more_than_four)
print(four)

print("more_than_four : {} and four : {}".format(more_than_four,four))


# fibonacci sequence

def fib(n):

    a = 0
    b = 1

    if n == 1:
        print(a)
    elif n <= 0:
        print("negative values are not accepted ")
    else:
        print(a)
        print(b)

        for i in range(2,n):
            
            c = a + b 
            a = b
            b = c
            if c > 100:        # extra . Not needed in the actual fibonacci series
                break          # extra . Not needed in the actual fibonacci series
            else:              # extra . Not needed in the actual fibonacci series
                print(c)       # extra . Not needed in the actual fibonacci series       

fib(int(input("enter the length of the fibonacci sequence")))

# factorial of a number

def fact(n):

    f = 1
    for i in range(1, n + 1):
        f = f * i
    
    return f

x = int(input("enter the number"))
result = fact(x)
print(result)

# recursion


import sys

sys.setrecursionlimit(1743)

print(sys.getrecursionlimit())

i = 0


def greet():
    global i
    i +=1 
    print("hello world", i)
    greet()

greet()

# factorial using recursion

def fact(n):
    if n == 0:
        return 1   

    return n * fact(n - 1)

result = fact(int(input("enter the number whose factorial you want to get")))
print(result)


